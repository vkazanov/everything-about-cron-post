* Cron: история, популярные версии, использование и устройство
** TODO Аннотация

   Сослаться на статью Алексея.

** TODO Содержание
** Происхождение видов на пальцах

   Периодическое выполнение пользовательских или системных программ - очевидная необходимость во
   всех операционных системах. Поэтому необходимость в сервисах, позволяющих централизованно
   планировать и выполнять такие работы, осозналась программистами очень рано.

   Unix-подобные операционные системы ведут свою родословную от [[https://en.wikipedia.org/wiki/Version_7_Unix][Version 7 Unix]], разработанного в
   70-х годах прошлого века в [[https://en.wikipedia.org/wiki/Bell_Labs][Bell Labs]] в том числе и знаменитым Кеном Томпсоном (англ. [[https://en.wikipedia.org/wiki/Ken_Thompson][Ken
   Thompson]]). Эта операционная система стала прародителем двух крупных семейств ОС: BSD-подобных и
   SysV-подобных. Вместе c Version 7 Unix поставлялся и сервис cron, позволявший регулярно выполнять
   задачи суперпользователя.

   Типичный современный cron - несложная программа, но алгоритм работы оригинального варианта был
   совсем простым: сервис просыпался раз в минуту, читал табличку с задачами из единственного файл
   (/etc/lib/crontab), и выполнял для суперпользователя те задачи, которые надо было выполнить в
   текущую минуту.

   Сервис оказался одновременно простым и очень полезным, поэтому со всеми последующими
   Unix-подобными операционными системами поставлялись те или иные варианты cron с похожим - но
   усовершенствованным - интерфейсом.

   Обобщенное описание формата crontab и базовых принципов работы утилиты было включено уже во
   второе издание главного стандарта Unix-подобных операционных систем - [[https://en.wikipedia.org/wiki/POSIX][POSIX]] - и, таким образом,
   cron из стандарта де-факто стал стандартом де-юре.

   В 1987 году Пол Викси (англ. [[https://en.wikipedia.org/wiki/Paul_Vixie][Paul Vixie]]), опросив пользователей Unix на предмет пожеланий к cron,
   выпустил свою версию демона, которая исправляла ключевые проблемы традиционных cron и расширила
   стандартный синтаксис файлов-таблиц.

   У Vixie Cron была очень либеральная лицензия, верней, вообще никакой лицензии, если не считать
   пожеланий в README: гарантий автор не дает, имя автора удалять нельзя, а продавать программу
   можно только вместе с исходным кодом. Эти требования совместимы с принципами набиравшего в те
   годы популярность свободного ПО, поэтому некоторые ключевые из появившихся в начале 90-х
   дистрибутивов Linux взяли Vixie Cron в качестве системного cron и развивают его до сих пор.

   В частности, RedHat и Suse развивают форк Vixie Cron - cronie; а Debian (и Ubuntu) используют
   оригинальное издание Vixie Cron с небольшими патчами.

   Давайте для начала познакомимся с описанной в POSIX стандартной утилитой crontab, после чего
   разберем расширения Vixie Cron и использование вариантов Vixie Cron в популярных дистрибутивах.
   И, наконец, вишенка на торте - подробный разбор устройства самого демона.

** POSIX crontab

   Если оригинальный cron всегда работал для суперпользователя, то современные планировщики имеют
   дело с задачами обычных пользователей - так безопасней и удобней.

   Cron-ы обычно поставляются двумя программами: постоянно работающий суперпользовательский демон
   cron и доступная пользователям программа crontab. Последняя позволяет редактировать таблички
   задач, специфичные для каждого пользователя в системе.

   В стандарте POSIX никак не описывается поведение демона, формализована только пользовательская
   программа [[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html][crontab]].

   Вызовами стандартного crontab можно сделать только четыре вещи: отредактировать пользовательскую
   таблицу задач в редакторе, загрузить таблицу из файла, показать текущую таблицу задач и очистить
   таблицу задач. С точки зрения пользователя для запуска задач больше ничего не требуется.

   Примеры работы утилиты crontab:

   #+BEGIN_SRC shell
   crontab -e # редактировать таблицу задач
   crontab -l # показать таблицу задач
   crontab -r # удалить таблицу задач
   crontab path/to/file.crontab # загрузить таблицу задач из файла
   #+END_SRC

   При вызове =crontab -e= будет использоваться редактор, указанный в стандартной переменной окружения
   =EDITOR=.

   Сами задачи описаны в следующем формате:

   #+BEGIN_SRC crontab
   # строки-комментарии игнорируются
   #
   # задача, выполняемая ежеминутно
   * * * * * /path/to/exec -a -b -c
   # задача, выполняемая на 10-ой минуте каждого часа
   10 * * * * /path/to/exec -a -b -c
   # задача, выполняемая на 10-ой минуте 2-ого часа каждого дня и использующая перенаправление стандартного потока вывода
   10 2 * * * /path/to/exec -a -b -c > /tmp/cron-job-output.log
   #+END_SRC

   Первые пять полей записей: минуты [1..60], часы [0..23], дни месяца [1..31], месяцы [1..12], дни
   недели [0..6], где 0 - воскресение. Последнее, шестое, поле - строка, которая будет выполнена
   стандартным интерпретатором команд.

   В первых пяти полях значения можно перечислять через запятую:

   #+BEGIN_SRC crontab
   # задача, выполняемая в 1-ую и 10-ую минуты каждого часа
   1,10 * * * * /path/to/exec -a -b -c
   #+END_SRC

   Или через дефис:

   #+BEGIN_SRC crontab
   # задача, выполняемая в каждую из первых 10-и минут каждого часа
   0-9 * * * * /path/to/exec -a -b -c
   #+END_SRC

   Доступ пользователей к планированию задач регулируется в POSIX файлам cron.allow и cron.deny в
   которых перечисляются, соответственно, пользователи с доступом к crontab и пользователи без
   доступа к программе. Расположение этих файлов стандарт никак не регламентирует.

   Запускаемым программам согласно стандарту должны передаваться по меньшей мере четыре переменные
   окружения:

   1. HOME - домашняя директория пользователя.
   2. LOGNAME - логин пользователя.
   3. PATH - путь, по которому можно найти стандартные утилиты системы.
   4. SHELL - путь к использованному командному интерпретатору.

   Примечательно, что POSIX ничего не говорит о том, откуда берутся значения для этих переменных.

** Хит продаж - Vixie Cron V3

   Общий предок популярных версий cron - Vixie Cron V3, основные возможности которого мы рассмотрим
   подробней.

   Vixie Cron поставляется в двух программах (cron и crontab). Демон Cron отвечает за чтение и
   запуск задач из системной таблицы задач и таблиц задач отдельных пользователей. Crontab -
   редактирование пользовательских таблиц.

*** Расположение таблиц задач и файлов конфигурации

    Таблица задач суперпользователя расположена в /etc/crontab. Синтаксис системной таблицы имеют
    общий для Vixie Cron синтаксис с поправкой на то, что в ней шестой колонкой указывается имя
    пользоваеля, от которого запускается задача:

    #+BEGIN_SRC crontab
    # Запускается ежеминутно от пользователя vlad
    * * * * * * vlad /path/to/exec
    #+END_SRC

    Таблицы задач обычных пользователей располагаются в /var/cron/tabs/username и используют общий
    синтаксис. При запуске утилиты crontab от имени пользователя редактируются именно эти файлы.

    Управление списками пользователей, имеющих доступ к crontab, происходит в файлах //var/cron/allow
    и //var/cron/deny/, куда достаточно внести имя пользователя отдельной строкой.

*** Расширенный синтаксис

   По сравнению с POSIX crontab Пол Викси добавил несколько очень полезных модицикаций в синтаксис
   таблиц задач утилиты.

   Стал доступен расширенный синтаксис таблиц, например, можно указывать дни недели или месяцы
   поименно (Mon, Tue и так далее):

   #+BEGIN_SRC crontab
   # Запускается ежеминутно по понедельникам и вторникам в январе
   * * * Jan Mon,Tue * /path/to/exec
   #+END_SRC

   Можно указывать шаг, через который запускаются задачи:

   #+BEGIN_SRC crontab
   # Запускается каждую вторую минуту
   */2 * * * Mon,Tue /path/to/exec
   #+END_SRC

   Шаги и интервалы можно смешивать:

   #+BEGIN_SRC crontab
   # Запускается каждую вторую минуту первых десяти минут каждого часа
   0-10/2 * * * * * /path/to/exec
   #+END_SRC

   Поддерживаются интуитивные альтернативы обычному синтаксису: reboot, yearly, annually, monthly,
   weekly, daily, midnight, hourly:

   #+BEGIN_SRC crontab
   # Запускается после перезагрузки системы
   @reboot /exec/on/reboot
   # Запускается раз в день
   @daily /exec/daily
   # Запускается раз в час
   @hourly /exec/daily
   #+END_SRC

*** Среда выполнения задач

   Vixie Cron позволяет менять окружение запускаемых приложений.

   Изначально переменные окружения USER, LOGNAME и HOME не просто предоставляются демоном, а берутся
   по умолчанию из файла [[https://en.wikipedia.org/wiki/Passwd][passwd]]. Переменная PATH по умолчанию получает значение "/usr/bin:/bin/", а
   SHELL - "/bin/sh". Значения всех переменных кроме LOGNAME можно изменить в таблицах
   пользователей.

   Некоторые переменные окружения (прежде всего SHELL и HOME) используются самим cron для запуска
   задачи. Вот, например, использование bash вместо стандартного sh для запуска задач:

   #+BEGIN_SRC crontab
   SHELL=/bin/bash
   HOME=/tmp/
   # exec будет запущен bash-ем в /tmp/
   * * * * * /path/to/exec
   #+END_SRC

   В конечном итоге все определенные в таблице переменные окружения (используемые cron или
   необходимые процессу) будут переданы запущенной задаче.

   Для редактирования файлов утилитой crontab используется редактор указанный в переменных окружения
   VISUAL или EDITOR. Если в среде, где был запущен crontab, эти переменные не определены, то
   используется "/usr/ucb/vi".

** TODO Vixie Cron в Debian и Ubuntu

   based on Vixie Cron v3

   TODO: no passwd

   TODO: repo link

** TODO Vixie Cron в RedHat, Fedora и CentOS

   based on Vixie Cron v4.1

   TODO: repo link

** TODO Устройство Vixie Cron
** TODO Выводы

   TODO: альтернативы

   TODO: указать, что надо обращаться к документации каждой из платформ

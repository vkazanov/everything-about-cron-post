* Cron: история, популярные версии, использование и устройство

** Происхождение видов

   Периодическое выполнение пользовательских или системных программ - очевидная необходимость во
   всех операционных системах. Поэтому необходимость в сервисах, позволяющих централизованно
   планировать и выполнять такие работы, осозналась программистами очень рано.

   Unix-подобные операционные системы ведут свою родословную от [[https://en.wikipedia.org/wiki/Version_7_Unix][Version 7 Unix]], разработанного в
   70-х годах прошлого века в [[https://en.wikipedia.org/wiki/Bell_Labs][Bell Labs]]. Эта операционная система стала прародителем двух крупных
   семейств ОС: BSD-подобных и SysV-подобных. Вместе c Version 7 Unix поставлялся и сервис cron,
   позволявший регулярно выполнять задачи суперпользователя.

   Типичный современный cron - несложная программа, но алгоритм работы оригинального варианта был
   совсем простым: сервис просыпался раз в минуту, читал табличку с задачами из единственного файл
   (/etc/lib/crontab), и выполнял для суперпользователя те задачи, которые надо было выполнить в
   текущую минуту.

   Сервис оказался одновременно простым и очень полезным, поэтому со всеми последующими
   Unix-подобными операционными системами поставлялись те или иные варианты cron с похожим - но
   усовершенствованным - интерфейсом.

   Обобщенное описание формата crontab и базовых принципов работы утилиты было включено уже во
   второе издание главного стандарта Unix-подобных операционных систем - [[https://en.wikipedia.org/wiki/POSIX][POSIX]] - и, таким образом,
   cron из стандарта де-факто стал стандартом де-юре.

   В 1987 году Пол Викси (англ. [[https://en.wikipedia.org/wiki/Paul_Vixie][Paul Vixie]]), опросив пользователей Unix на предмет пожеланий к cron,
   выпустил свою версию демона, которая исправляла ключевые проблемы традиционных cron и расширила
   стандартный синтаксис файлов-табличек.

   У Vixie Cron была очень либеральная лицензия, верней, вообще никакой лицензии помимо пожеланий в
   README: гарантий автор не дает, имя автора удалять нельзя, а продавать программу можно только
   вместе с исходным кодом. Эти требования совместимы с принципами набиравшего в те годы
   популярность свободного ПО, поэтому некоторые ключевые из появившихся в начале 90-х дистрибутивов
   Linux взяли Vixie Cron в качестве системного cron и развивают его до сих пор.

   В частности, RedHat и Suse развивают форк Vixie Cron - cronie; а Debian (а вместе с ним и Ubuntu)
   используют фактически оригинальное издание Vixie Cron с небольшими патчами.

   Давайте для начала познакомимся с описанной в POSIX стандартной утилитой crontab, после чего
   разберем Vixie Cron и специфичные для популярных дистрибутивов версии.

** POSIX Crontab

   Если оригинальный cron всегда работал для суперпользователя, то современные планировщики имеют
   дело с задачами обычных пользователей - так безопасней и удобней.

   Cron-ы обычно поставляются двумя программами: постоянно работающий суперпользовательский демон
   cron и доступная пользователям программа crontab. Последняя позволяет редактировать таблички
   задач, специфичные для каждого пользователя в системе.

   В стандарте POSIX никак не описывается поведение демона, формализована только пользовательская
   программа [[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html][crontab]].

   Вызовами стандартного crontab можно сделать только четыре вещи: отредактировать пользовательскую
   таблицу задач в редакторе, загрузить таблицу из файла, показать текущую таблицу задач и очистить
   таблицу задач. Примеры:

   #+BEGIN_SRC shell
   crontab -e # редактировать таблицу задач
   crontab -l # показать таблицу задач
   crontab -r # удалить таблицу задач
   crontab path/to/file.crontab # загрузить таблицу задач из файла
   #+END_SRC

   При вызове =crontab -e= будет использоваться редактор, указанный в стандартной переменной окружения
   =EDITOR=.

   Сами задачи описаны в следующем формате:

   #+BEGIN_SRC crontab
   # строки-комментарии игнорируются
   #
   # задача, выполняемая ежеминутно
   * * * * * /path/to/exec -a -b -c
   # задача, выполняемая на 10-ой минуте каждого часа
   10 * * * * /path/to/exec -a -b -c
   # задача, выполняемая на 10-ой минуте 2-ого часа каждого дня и использующая перенаправление стандартного потока вывода
   10 2 * * * /path/to/exec -a -b -c > /tmp/cron-job-output.log
   #+END_SRC

   Первые пять полей записей: минуты [1..60], часы [0..23], дни месяца [1..31], месяцы [1..12], дни
   недели [0..6], где 0 - воскресение. Последнее, шестое, поле - строка, которая будет выполнена
   стандартным интерпретатором команд.

   В первых пяти полях значения можно перечислять через запятую:

   #+BEGIN_SRC crontab
   # задача, выполняемая в 1-ую и 10-ую минуты каждого часа
   1,10 * * * * /path/to/exec -a -b -c
   #+END_SRC

   Или через дефис:

   #+BEGIN_SRC crontab
   # задача, выполняемая в каждую из первых 10-и минут каждого часа
   0-9 * * * * /path/to/exec -a -b -c
   #+END_SRC

   Доступ пользователей к планированию задач регулируется в POSIX файлам cron.allow и cron.deny в
   которых перечисляются, соответственно, пользователи с доступом к crontab и пользователи без
   доступа к программе. Расположение этих файлов стандарт никак не регламентирует.

   Запускаемым программам согласно стандарту должны передаваться по меньшей мере четыре переменные
   окружения:

   1. HOME - домашняя директория пользователя.
   2. LOGNAME - логин пользователя.
   3. PATH - путь, по которому можно найти стандартные утилиты системы.
   4. SHELL - путь к использованному командному интерпретатору.

   Примечательно, что POSIX ничего не говорит о том, откуда берутся значения для этих переменных.

** TODO Хит продаж - Vixie Cron
** TODO Vixie Cron в Debian и Ubuntu
** TODO Vixie Cron в RedHat, Fedora и CentOS
** TODO Устройство Vixie Cron
** TODO Альтернативы
